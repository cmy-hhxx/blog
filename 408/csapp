#  csaap

## chapter 1 overview

### 1.1 Information is bits and context

- The  program is stored in a file as **a sequence of bytes.** Each byte has an integer value that corresponds to some character.

- All information in a system is represented as a bunch of bits.

- The only thing that distinguishes different data objects is the **context** in which we view them.

- **Approximations** that can behave in unexpected ways.

***

### 1.2 Programs are translated by other programs into different forms

- The programs that perform the four phrases (preprocessor,complier,assembler,and linker) are known collectively as the compilation system.

- Preprocessing phase: Read the contents of the system header file stdio.h and insert it directly into the program text. The result is another C program, typically with the .i suffix.

- Compilation phase: The compiler translates the text file hello.i into the text file hello.s, which contains an assembly-language program. 

- Assembly phase: The assembler translates hello.s into machine-language instructions, packages them in a form known as a **relocatable object program**, and stores the result in the object file hello.o

- Link phase: The linker handles this merging. The result is the hello file, which is an executable object file that is ready to be loaded into memory and executed by the system.

***

### 1.3 It pays to understand how compilation systems work

- Optimizing program performance

- Understanding link-time errors

- Avoiding security holes

***

### 1.4 Processors read and interpret instructions stored in memory

- Hardware organization of a system

- Buses

- IO Devices

- Main Memory

- Processor

- Running the hello program

***

### 1.5 Caches matter

- To deal with the processor-memory gap, system designers include smaller,faster storage devices called cache memories that serve as **temporary staging areas** for information that the processor is likely to need in the near feature.

***

### 1.6 Storage devices form a hierarchy

- As we move from the top of the hierarchy to the bottom, the devices become slower,larger,and less costly per byte.

******

### 1.7 The operating system manages the hardware

- All attempts by an application program to manipulate the hardware must go through the operating system.

- The operating system achieves both goals via the fundamental abstractions: processes, virtual memory, and files.

***

### 1.8 Systems communicate with each other systems using networks

***

## chapter 2 Representing and manipulating information
### 2.1 Information Storage
- Rather than accessing individual bits in memory, most computers use blocks of 8 bits, or bytes, as the smallest addressable unit of memory.
- C compiler simply treats each program object as a block of bytes and the program itself as a sequence of bytes.

#### 2.1.1 Hexadecimal notation
- why hexadecimal?
- If the total number of bits is not a multiple of 4, you should make the leftmost group be the one with fewer than 4 bits, effectively padding the number with leading zeros.
#### 2.1.2 Data size
- A 32-bit word size limits the virtual address space to 4 gigabytes, that is just over 4 \* 10e9 bytes.
- Scaling up to a 64-bit word size leads to a virtual address space of 16 exabytes, or around 1.84 \* 10e19 bytes.
- Using fixed-size types is the best way for programmers to have close control over data representations.
- In many contexts, however, the program's behavior is insensitive to whether data type char is signed or unsigned.
#### 2.1.3 Addressing and byte ordering
- Two conventions: what the address of the object will be and how we will order the bytes in memory.
- A common problem is for data produced by a little-endian machine to be sent to a big-endian machine, or vice versa, leading to the bytes within the words being in reverse order for the receiving program.
#### 2.1.4 Representing strings
- Text data are more platform independent than binary data.
#### 2.1.5 Representing code
- Binary code is seldom portable across different combinations of machine and operating system.
- A program,from the perspective of the machine,is simply a sequence of bytes.
#### 2.1.6 Introduction to boolean algebra
- Since binary values are at the core of how computers encode,store,and manipulate information,a rich body of mathematical knowledge has evolved aroud the study of 0 and 1.
#### 2.1.7 Bit-level operations in C
- One common use of bit-level opeartions is to implement masking opeartions, where a mask is a bit pattern that indicates a selected set of bits within a word.
#### 2.1.8 Logical operations in C
- The logical opeartions treat any nonzero arguments as representing TRUE and argument 0 as representing FALSE.
#### 2.1.9 Shift operation in C
- In practice,however,almost all compiler/machine combinations use arithmetic right shifts for signed data and many programmers assume this to be the case.
- For unsigned data,on the other hand,right shifts must be logical.

***

### 2.2 Integer Representations
#### 2.2.1 Integral data types
#### 2.2.2 Unsigned encodings
#### 2.2.3 Two's-complement encodings
#### 2.2.4 Conventions between signed and unsigned
#### 2.2.5 Signed versus unsigned in C
#### 2.2.6 Expanding the bit representation of a number
#### 2.2.7 Truncating numbers

***

### 2.3 Integer arithmetic

#### 2.3.1 Unsigned addition

- If we were to maintain the sum as a (w + 1)-bit number and add it to another value,we may require w + 2 bits, and so on. This continued "word size inflation" means we cannot place any bound on the word size required to fully represent the results of arithmetic operations.
- More commonly,programming languages support fixed-size arithmetic,and hence operations such as "addition" and "multiplication" differ from their counterpart operations over integers.

#### 2.3.2 Two's-complement Addition
#### 2.3.3 Two's-complement negation
#### 2.3.4 Unsigned multiplication
#### 2.3.5 Two's-complement multiplication
#### 2.3.6 Multiplying by constants
#### 2.3.7 Dividing by powers of 2
#### 2.3.8 Final thoughts on integer arithmetic

***

### 2.4 Floating point
#### 2.4.1 Fractional binary numbers

